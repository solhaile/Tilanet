name: Deploy Node.js Backend to Azure App Service

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'

env:
  AZURE_WEBAPP_NAME: tilanet-app    # Set this to your app name
  AZURE_RESOURCE_GROUP: tilanet-rg  # Set this to your resource group name
  AZURE_WEBAPP_PACKAGE_PATH: './backend'    # Set this to the path to your backend
  NODE_VERSION: '22.x'                      # Set this to the node version to use  

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tilanet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    # - name: Install PostgreSQL client
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y postgresql-client

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "⏳ Waiting for PostgreSQL to be ready..."
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "PostgreSQL is not ready yet..."
          sleep 2
        done
        echo "✅ PostgreSQL is ready!"

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tilanet_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        USE_MOCK_OTP: true
      run: |
        cd backend
        echo "🗄️ Setting up test database..."
        npm run db:setup-test

    - name: Run linting
      run: |
        cd backend
        npm run lint

    - name: Run tests with PostgreSQL
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tilanet_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
        USE_MOCK_OTP: true
      run: |
        cd backend
        echo "🧪 Running tests with PostgreSQL..."
        npm test -- --coverage --verbose

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Build application
      run: |
        cd backend
        npm run build

    - name: Prepare deployment package
      run: |
        # Create clean deployment directory
        mkdir deploy-package
        cd backend
        
        # Copy everything needed for Azure deployment
        cp -r dist ../deploy-package/
        cp package.json ../deploy-package/
        cp package-lock.json ../deploy-package/
        
        # Copy the existing startup script
        cp startup.sh ../deploy-package/
        
        # Install production dependencies in deployment package
        cd ../deploy-package
        npm ci --only=production
        
        # Verify deployment package structure
        echo "📋 Deployment package contents:"
        ls -la
        echo "📋 Node modules check:"
        ls -la node_modules/ | head -10

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deploy-package

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-staging.outputs.webapp-url }}

    steps:
    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure Web App Staging Slot'
      id: deploy-to-staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'staging'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: .

    - name: 'Set startup command'
      uses: azure/cli@v1
      with:
        inlineScript: |
          az webapp config set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP || 'tilanet-rg' }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot staging \
            --startup-file "node dist/server.js"

    - name: 'Wait for staging deployment to stabilize'
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 60

    - name: 'Run smoke tests on staging'
      run: |
        # Additional wait for app to fully start
        sleep 30
        
        echo "🔍 Testing staging deployment ..."
        
        # Basic health check with more detailed error reporting
        STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health"
        echo "📍 Health check URL: $STAGING_URL"
        
        # Retry logic for health check
        for i in {1..5}; do
          echo "🔄 Health check attempt $i/5..."
          if curl -f -s "$STAGING_URL"; then
            echo "✅ Staging deployment successful and health check passed"
            echo "🔗 Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
            exit 0
          else
            echo "❌ Health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "💥 Staging health check failed after 5 attempts"
        echo "🔍 Check Azure App Service logs for more details"
        exit 1

  promote-to-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: 'production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Swap staging to production'
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "🔄 Swapping staging slot to production..."
          az webapp deployment slot swap \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP || 'tilanet-rg' }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot staging \
            --target-slot production

    - name: 'Note: Database migrations will run on app startup'
      run: |
        echo "🗄️ Database migrations will be handled by the startup script"
        echo "📋 The startup.sh script will run migrations before starting the app"
        echo "🔧 This ensures migrations run in the correct environment with proper credentials"

    - name: 'Wait for production deployment to stabilize'
      run: |
        echo "⏳ Waiting for production deployment to stabilize..."
        sleep 30

    - name: 'Run production health check'
      run: |
        echo "🔍 Testing production deployment..."
        
        # Production health check
        PRODUCTION_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        echo "📍 Production health check URL: $PRODUCTION_URL"
        
        # Retry logic for production health check
        for i in {1..5}; do
          echo "🔄 Production health check attempt $i/5..."
          if curl -f -s "$PRODUCTION_URL"; then
            echo "🎉 Production deployment successful and health check passed!"
            echo "🌐 Production URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
            echo "🔗 Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
            exit 0
          else
            echo "❌ Production health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "💥 Production health check failed after 5 attempts"
        echo "🚨 Consider rolling back the deployment!"
        exit 1

    - name: 'Deployment Summary'
      if: success()
      run: |
        echo "🎯 Deployment Summary:"
        echo "✅ Staging: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
        echo "✅ Production: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "📊 Both environments are healthy and ready!"
        echo "🗄️ Database migrations completed successfully"
        echo "🧪 All tests passed with PostgreSQL"
