name: Deploy Node.js Backend to Azure App Service

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  AZURE_WEBAPP_NAME: tilanet-app    # Set this to your app name
  AZURE_RESOURCE_GROUP: tilanet-rg  # Set this to your resource group name
  AZURE_WEBAPP_PACKAGE_PATH: './backend'    # Set this to the path to your backend
  NODE_VERSION: '22.x'                      # Set this to the node version to use  

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run tests
      env:
        JWT_SECRET: test-secret-key-for-ci
        NODE_ENV: test
      run: |
        cd backend
        npm test

    - name: Run lint
      run: |
        cd backend
        npm run lint

    - name: Build application
      run: |
        cd backend
        npm run build

    - name: Prepare deployment package
      run: |
        # Create clean deployment directory
        mkdir deploy-package
        cd backend
        
        # Copy everything needed for Azure deployment
        cp -r dist ../deploy-package/
        cp package.json ../deploy-package/
        cp package-lock.json ../deploy-package/
        
        # Copy the existing startup script
        cp startup.sh ../deploy-package/
        
        # Install production dependencies in deployment package
        cd ../deploy-package
        npm ci --only=production
        
        # Verify deployment package structure
        echo "üìã Deployment package contents:"
        ls -la
        echo "üìã Node modules check:"
        ls -la node_modules/ | head -10

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deploy-package

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-staging.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure Web App Staging Slot'
      id: deploy-to-staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'staging'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: .

    - name: 'Wait for staging deployment to stabilize'
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 60

    - name: 'Run smoke tests on staging'
      run: |
        # Additional wait for app to fully start
        sleep 30
        
        echo "üîç Testing staging deployment ..."
        
        # Basic health check with more detailed error reporting
        STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health"
        echo "üìç Health check URL: $STAGING_URL"
        
        # Retry logic for health check
        for i in {1..5}; do
          echo "üîÑ Health check attempt $i/5..."
          if curl -f -s "$STAGING_URL"; then
            echo "‚úÖ Staging deployment successful and health check passed"
            echo "üîó Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
            exit 0
          else
            echo "‚ùå Health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "üí• Staging health check failed after 5 attempts"
        echo "üîç Check Azure App Service logs for more details"
        exit 1

  promote-to-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: 'production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Swap staging to production'
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "üîÑ Swapping staging slot to production..."
          az webapp deployment slot swap \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP || 'tilanet-rg' }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot staging \
            --target-slot production

    - name: 'Wait for production deployment to stabilize'
      run: |
        echo "‚è≥ Waiting for production deployment to stabilize..."
        sleep 30

    - name: 'Run production health check'
      run: |
        echo "üîç Testing production deployment..."
        
        # Production health check
        PRODUCTION_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        echo "üìç Production health check URL: $PRODUCTION_URL"
        
        # Retry logic for production health check
        for i in {1..5}; do
          echo "üîÑ Production health check attempt $i/5..."
          if curl -f -s "$PRODUCTION_URL"; then
            echo "üéâ Production deployment successful and health check passed!"
            echo "üåê Production URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
            echo "üîó Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
            exit 0
          else
            echo "‚ùå Production health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "üí• Production health check failed after 5 attempts"
        echo "üö® Consider rolling back the deployment!"
        exit 1

    - name: 'Deployment Summary'
      if: success()
      run: |
        echo "üéØ Deployment Summary:"
        echo "‚úÖ Staging: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
        echo "‚úÖ Production: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üìä Both environments are healthy and ready!"
