name: Deploy Node.js Backend to Azure App Service

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_WEBAPP_NAME: tilanet-idir-app    # Set this to your app name
  AZURE_WEBAPP_PACKAGE_PATH: './backend'    # Set this to the path to your backend
  NODE_VERSION: '20.x'                      # Set this to the node version to use

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run tests
      env:
        JWT_SECRET: test-secret-key-for-ci
        NODE_ENV: test
      run: |
        cd backend
        npm test

    - name: Run lint
      run: |
        cd backend
        npm run lint

    - name: Build application
      run: |
        cd backend
        npm run build

    - name: Prepare deployment package
      run: |
        # Create clean deployment directory
        mkdir deploy-package
        cd backend
        
        # Copy only what's needed for production
        cp -r dist ../deploy-package/
        cp package.json ../deploy-package/
        cp package-lock.json ../deploy-package/
        
        # Copy deployment configuration files
        if [ -f .deployment ]; then cp .deployment ../deploy-package/; fi
        if [ -f web.config ]; then cp web.config ../deploy-package/; fi

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: deploy-package

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-staging.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure Web App Staging Slot'
      id: deploy-to-staging
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'staging'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: .

    - name: 'Wait for staging deployment to stabilize'
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 60

    - name: 'Run smoke tests on staging'
      run: |
        # Additional wait for app to fully start
        sleep 30
        
        echo "üîç Testing staging deployment..."
        
        # Basic health check with more detailed error reporting
        STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health"
        echo "üìç Health check URL: $STAGING_URL"
        
        # Retry logic for health check
        for i in {1..5}; do
          echo "üîÑ Health check attempt $i/5..."
          if curl -f -s "$STAGING_URL"; then
            echo "‚úÖ Staging deployment successful and health check passed"
            echo "üîó Staging URL: https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
            exit 0
          else
            echo "‚ùå Health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "üí• Staging health check failed after 5 attempts"
        echo "üîç Check Azure App Service logs for more details"
        exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-production.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure Web App Production'
      id: deploy-to-production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        package: .

    - name: 'Swap staging to production (alternative method)'
      if: false  # Set to true if you prefer slot swapping instead of direct deployment
      uses: azure/cli@v1
      with:
        inlineScript: |
          az webapp deployment slot swap \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot staging \
            --target-slot production

    - name: 'Run production smoke tests'
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        echo "üîç Testing production deployment..."
        
        # Basic health check with retry logic
        PRODUCTION_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        echo "üìç Health check URL: $PRODUCTION_URL"
        
        # Retry logic for health check
        for i in {1..5}; do
          echo "üîÑ Health check attempt $i/5..."
          if curl -f -s "$PRODUCTION_URL"; then
            echo "‚úÖ Production deployment successful and health check passed"
            echo "üîó Production URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
            exit 0
          else
            echo "‚ùå Health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        
        echo "üí• Production health check failed after 5 attempts"
        echo "üîç Check Azure App Service logs for more details"
        exit 1

    - name: 'Notify deployment success'
      run: |
        echo "üéâ Deployment to production completed successfully!"
        echo "üìä Check monitoring and logs for any issues"
