name: Deploy to Production with Time Delay

on:
  workflow_dispatch:
    inputs:
      delay_hours:
        description: 'Hours to wait before production deployment'
        required: true
        default: '24'
        type: choice
        options:
        - '1'
        - '4'
        - '8'
        - '24'
        - '48'
      staging_url:
        description: 'Staging URL to validate (optional)'
        required: false
        type: string

env:
  AZURE_WEBAPP_NAME: tilanet-idir-app
  NODE_VERSION: '20.x'

jobs:
  validate-staging:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
    
    steps:
    - name: 'Validate staging deployment'
      run: |
        STAGING_URL="${{ github.event.inputs.staging_url }}"
        if [ -z "$STAGING_URL" ]; then
          STAGING_URL="https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net"
        fi
        
        echo "🔍 Validating staging deployment at: $STAGING_URL"
        
        # Health check
        if curl -f "$STAGING_URL/api/health"; then
          echo "✅ Staging health check passed"
        else
          echo "❌ Staging health check failed"
          exit 1
        fi
        
        # Basic API tests
        echo "🧪 Running basic API validation..."
        
        # Test signup endpoint
        SIGNUP_RESPONSE=$(curl -s -X POST "$STAGING_URL/api/auth/signup" \
          -H "Content-Type: application/json" \
          -d '{
            "phone": "+1234567890",
            "password": "TestPass123",
            "firstName": "Test",
            "lastName": "User"
          }')
        
        if echo "$SIGNUP_RESPONSE" | grep -q "success.*true"; then
          echo "✅ Signup endpoint working"
        else
          echo "❌ Signup endpoint failed"
          echo "Response: $SIGNUP_RESPONSE"
          exit 1
        fi
        
        echo "🎉 All staging validations passed!"

  wait-for-approval:
    runs-on: ubuntu-latest
    needs: validate-staging
    environment:
      name: 'production-approval'
    
    steps:
    - name: 'Wait for time delay'
      run: |
        DELAY_HOURS="${{ github.event.inputs.delay_hours }}"
        DELAY_SECONDS=$((DELAY_HOURS * 3600))
        
        echo "⏰ Waiting $DELAY_HOURS hours before production deployment..."
        echo "🕐 Started at: $(date)"
        echo "🕐 Will deploy at: $(date -d "+$DELAY_HOURS hours")"
        
        # In a real scenario, you might want to use a different approach
        # like scheduling a separate workflow or using GitHub Environments
        # with protection rules for time delays
        
        # For demonstration, we'll wait (in practice, use environment protection rules)
        if [ "$DELAY_HOURS" -eq "1" ]; then
          echo "⚡ Short delay for testing - waiting 5 minutes instead of 1 hour"
          sleep 300
        else
          echo "📅 Time delay configured. Use environment protection rules for actual delays."
          echo "ℹ️  Go to Settings > Environments > production-approval to configure:"
          echo "   - Required reviewers"
          echo "   - Wait timer ($DELAY_HOURS hours)"
        fi

    - name: 'Pre-deployment checklist'
      run: |
        echo "📋 Pre-production deployment checklist:"
        echo "✅ Staging validation passed"
        echo "✅ Time delay completed"
        echo "✅ Ready for production deployment"
        
        echo "🚀 Triggering production deployment..."

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [validate-staging, wait-for-approval]
    environment:
      name: 'production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    steps:
    - name: 'Download latest artifact'
      uses: actions/download-artifact@v4
      with:
        name: node-app
        path: ./app

    - name: 'Deploy to production'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./app

    - name: 'Post-deployment validation'
      run: |
        echo "🔍 Validating production deployment..."
        
        # Wait for deployment to be ready
        sleep 60
        
        PROD_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        # Health check
        if curl -f "$PROD_URL/api/health"; then
          echo "✅ Production health check passed"
        else
          echo "❌ Production health check failed"
          exit 1
        fi
        
        echo "🎉 Production deployment successful!"
        echo "🔗 Production URL: $PROD_URL"

    - name: 'Notify stakeholders'
      run: |
        echo "📧 Sending deployment notifications..."
        echo "✅ Production deployment completed at $(date)"
        echo "🔗 Application URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "📊 Monitor the application for the next 30 minutes"
        
        # You can add actual notification logic here:
        # - Send email notifications
        # - Post to Slack/Teams
        # - Update monitoring dashboards
